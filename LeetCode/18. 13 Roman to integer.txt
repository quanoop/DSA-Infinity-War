//Q: 


//Comments


//Initial Instinct




//Solution Code
class Solution {
public:
    int romanToInt(string s) {
        unordered_map<char, int> map1;
        unordered_map<char, int> map2;
        map1['I'] = 1;
        map1['V'] = 2;
        map1['X'] = 3;
        map1['L'] = 4; 
        map1['C'] = 5;
        map1['D'] = 6; 
        map1['M'] = 7;
        map2['I'] = 1;
        map2['V'] = 5;
        map2['X'] = 10;
        map2['L'] = 50;
        map2['C'] = 100;
        map2['D'] = 500;
        map2['M'] = 1000;
        
        if(s.length()==1){
            return map2[s[0]];
        }
       
        int n = s.length();
         int sum = map2[s[n-1]];
        for(int i=n-2;i>=0;i--){
            if(map1[s[i]]>=map1[s[i+1]]){
                sum+=map2[s[i]];
            } else {
                sum = sum - map2[s[i]];
            }
        }
        
        return sum;
        
    }
};




//Optimised solution
There is no need to initialise two maps

class Solution {
public:
    int romanToInt(string s) 
    {
        unordered_map<char,int> m{{'I',1},{'V',5},{'X',10},{'L',50},{'C',100,},{'D',500},{'M',1000}};
        int ans=m[s.back()];
        for(int i=s.size()-2;i>=0;i--)
        {
            if(m[s[i]]<m[s[i+1]])
            {
                ans-=m[s[i]];
            }
            else
            {
                ans+=m[s[i]];
            }
        }
        return ans;
        
    }
};



//FeedBack and more