// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    void dfs(vector<vector<int>>& isConnected, int i, vector<vector<bool>>& visited, int n){

        for(int j = 0;j<n;j++){
            if(isConnected[i][j]==1 and !visited[i][j]){
                visited[i][j] = visited[j][i] = true;
                dfs(isConnected, j, visited, n);
            }
        }

    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();

        int ans = 0;

        vector<vector<bool>> visited(n, vector<bool>(n, false));

        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                if(isConnected[i][j]==1 and !visited[i][j]){
                    ans++;
                    visited[i][j] = true;
                    visited[j][i] = true;
                    dfs(isConnected, j, visited, n);
                }
            }
        }

        return ans;

        
    }
};

// Optimised solution

// FeedBack and more