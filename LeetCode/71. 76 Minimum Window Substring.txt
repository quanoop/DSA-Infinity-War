//Q: 


//Comments


//Initial Instinct




//Solution Code
class Solution {
public:
    string minWindow(string s, string t) {
        int FT[256] = {0};
        int FS[256] = {0};
        int n = s.length(), m = t.length();
        for(int i = 0;i<m;i++){
            FT[t[i]]++;
        }
        int cnt=0;
        int start=0;
        int start_idx=-1;
        int min_so_far=INT_MAX, window;
        
        for(int i =0;i<n;i++){
            char ch = s[i];
            FS[ch]++;
            if(FT[ch]!=0 and FS[ch]<=FT[ch]){
                cnt++;
            }
            if(cnt == m){
                while(FT[s[start]]==0 or FS[s[start]] > FT[s[start]]){
                    FS[s[start]]--;
                    start++;
                }
                window = i - start + 1;
                if(window < min_so_far){
                    min_so_far = window;
                    start_idx = start;
                }
            }
}
        if(start_idx==-1)
            return "";
        else return s.substr(start_idx, min_so_far);
        
    }
};




//Optimised solution
Have a look at leetcode solution section



//FeedBack and more