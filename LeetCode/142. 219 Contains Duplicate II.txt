// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        unordered_map<int, vector<int>> map;
        int n = nums.size();
        for(int i = 0;i<n;i++){
            if(map.find(nums[i])==map.end()){
                map[nums[i]].push_back(i);
            } else {
                vector<int> temp = map[nums[i]];
                for(int x:temp){
                    if(abs(i-x)<=k)
                        return true;
                    map[nums[i]].push_back(i);
                }
            }
        }
        
        return false;
    }
};

// Optimised solution
class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        unordered_map<int,int> mp;
        int n = nums.size();
        
        for(int i=0; i<n; i++)
        {
            // mp.count() will tell whatever ith index that I want, have I seen it before?
            if(mp.count(nums[i]))
            {
                // if I have already seen this number, then check for condition abs(i - j) <= k
                if(abs(i-mp[nums[i]])<=k)
                    return true;
            }
            // if I have not seen this number before, insert the number with its position in the map
            // and if the number is already present in the map, then update the position of that number
            mp[nums[i]] = i;
        }
        // after the complete traversal, if we don't find a pair to satisfy the condition, return false
        return false;
    }
};


// FeedBack and more
There was not the need to put the positions in the vector of integers. Because if condition doesn't satisfy for the given index. It will also not satisfy for the further indexes. So replace it with the most recent ones taking the int only.