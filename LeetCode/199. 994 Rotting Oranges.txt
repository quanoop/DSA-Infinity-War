// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        if(grid.size() == 0) return 0;
        int fresOranges = 0, row = grid.size(), col = grid[0].size(), time = 0;
        vector<pair<int, int>>dirs = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        queue<pair<int, int>>q;

        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(grid[i][j] == 1){
                    fresOranges++;
                } else if(grid[i][j] == 2){
                    q.push({i, j});
                }
            }
        }

        while(!q.empty() && fresOranges != 0){
            int size = q.size();
            for(int i = 0; i < size; i++){
                pair<int, int>curr = q.front();
                q.pop();
                int x = curr.first, y = curr.second;

                for(auto dir: dirs){
                    int x1 = x+dir.first, y1 = y+dir.second;
                    if(x1 >= 0 && x1 < row && y1 >= 0 && y1 < col && grid[x1][y1] == 1){
                        grid[x1][y1] = 2;
                        fresOranges--;
                        q.push({x1, y1});
                    }
                }
            }
            time++;
        }
        return fresOranges == 0 ? time: -1;
    }
};

// Optimised solution

// FeedBack and more