// Q:

// Comments

// Initial Instinct

// Solution Code
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxdepth(TreeNode* r){
        if(r==NULL) return 0;
        return max(maxdepth(r->left),maxdepth(r->right)) + 1;
    }
 
    int diameterOfBinaryTree(TreeNode* root) {
        if(root==NULL)
            return 0;
        int m = maxdepth(root->left) + maxdepth(root->right);
        return max(m, max(diameterOfBinaryTree(root->left), diameterOfBinaryTree(root->right)));
        
    }
};

// Optimised solution
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    pair<int, int> helper(TreeNode* root){
        pair<int, int> p, Left, Right;
        if(root==NULL) return {0,0};
        Left = helper(root->left);
        Right = helper(root->right);
        
        p.first = max(Left.first, Right.first) + 1;
        
        p.second = max(Left.first + Right.first, max(Left.second, Right.second));
        
        return p;
        
    }
    int diameterOfBinaryTree(TreeNode* root) {
        pair<int, int> ans = helper(root);
        return ans.second;
    }
};

// FeedBack and more