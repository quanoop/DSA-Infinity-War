//Q: 


//Comments


//Initial Instinct




//Solution Code
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        bool flag1 = false,flag2=false;
        int p = 1,z=0;
        int n=nums.size();
        for(int i=0;i<n;i++){
            if(nums[i]!=0){
                p*=nums[i];
                flag2=true;
            } else {
                flag1 = true;
                z++;
            }
        }
        vector<int> ans(n, 0);
        if(!flag2 || z>1) return ans;
        for(int i = 0;i<n;i++){
            if(flag1){
                if(nums[i]==0)
                    ans[i]=p;
                else 
                    ans[i]=0;
            } else {
                ans[i] = p/nums[i];
            }
        }
        return ans;
    }
};




//Optimised solution

#include<vector>
using namespace std;

//Expected Complexity O(N)
vector<int> productArray(vector<int> arr){
    int n = arr.size();
      // Base case
    if (n == 1) {
        return {0};
    }
 
    int i, temp = 1;
 
    vector<int> prod(n,1);
    /* In this loop, temp variable contains product of
       elements on left side excluding arr[i] */
    for (i = 0; i < n; i++) {
        prod[i] = temp;
        temp *= arr[i];
    }
 
    /* Initialize temp to 1
    for product on right side */
    temp = 1;
 
    /* In this loop, temp variable contains product of
       elements on right side excluding arr[i] */
    for (i = n - 1; i >= 0; i--) {
        prod[i] *= temp;
        temp *= arr[i];
    }
    return prod;
}



//FeedBack and more