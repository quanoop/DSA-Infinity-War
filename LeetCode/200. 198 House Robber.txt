// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    int helper(vector<int> &nums, int i, int n, vector<int> &dp){
        if(i>=n) return 0;
        if(dp[i]!=-1) return dp[i];

        int ans1, ans2;
        ans1 = helper(nums, i+2, n, dp) + nums[i];
        ans2 = helper(nums, i+1, n, dp);

        dp[i] = max(ans1, ans2);

        return dp[i];
        
    }
    int rob(vector<int>& nums) {
        vector<int> dp(nums.size(), -1);

        return helper(nums, 0, nums.size(), dp);
    }
};

// Optimised solution
Step 4. Iterative + memo (bottom-up)

public int rob(int[] nums) {
    if (nums.length == 0) return 0;
    int[] memo = new int[nums.length + 1];
    memo[0] = 0;
    memo[1] = nums[0];
    for (int i = 1; i < nums.length; i++) {
        int val = nums[i];
        memo[i+1] = Math.max(memo[i], memo[i-1] + val);
    }
    return memo[nums.length];
}
Step 5. Iterative + 2 variables (bottom-up)
We can notice that in the previous step we use only memo[i] and memo[i-1], so going just 2 steps back. We can hold them in 2 variables instead. This optimization is met in Fibonacci sequence creation and some other problems [to paste links].

/* the order is: prev2, prev1, num  */
public int rob(int[] nums) {
    if (nums.length == 0) return 0;
    int prev1 = 0;
    int prev2 = 0;
    for (int num : nums) {
        int tmp = prev1;
        prev1 = Math.max(prev2 + num, prev1);
        prev2 = tmp;
    }
    return prev1;
}

// FeedBack and more