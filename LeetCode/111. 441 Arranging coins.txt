// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    int arrangeCoins(int n) {
        int next = 1;
        int ans = 0;
        while(n>0){
            if(n-next>=0) ans++;
            n=n-next;
            next++;
        }
        return ans;
    }
};

// Optimised solution
Approach 2: Math
If we look deeper into the formula of the problem, we could actually solve it with the help of mathematics, without using any iteration.

As a reminder, the constraint of the problem can be expressed as follows:

k(k + 1) \le 2Nk(k+1)≤2N

This could be solved by completing the square technique,

\left(k + \frac{1}{2}\right)^2 - \frac{1}{4} \le 2N(k+ 
2
1
​
 ) 
2
 − 
4
1
​
 ≤2N

that results in the following answer:

k = \left[\sqrt{2N + \frac{1}{4}} - \frac{1}{2}\right]k=[ 
2N+ 
4
1
​
 
​
 − 
2
1
​
 ]


class Solution {
  public int arrangeCoins(int n) {
    return (int)(Math.sqrt(2 * (long)n + 0.25) - 0.5);
  }
}


By binary search

class Solution {
  public int arrangeCoins(int n) {
    long left = 0, right = n;
    long k, curr;
    while (left <= right) {
      k = left + (right - left) / 2;
      curr = k * (k + 1) / 2;

      if (curr == n) return (int)k;

      if (n < curr) {
        right = k - 1;
      } else {
        left = k + 1;
      }
    }
    return (int)right;
  }
}

// FeedBack and more