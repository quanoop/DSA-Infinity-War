// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    int helper(vector<vector<int>>& obstacleGrid, int m, int n, int i, int j, vector<vector<int>> &dp){
        if(i>m or j>n) return 0;
        if(obstacleGrid[i][j]==1) return 0;
        if(i==m and j==n) return 1;
        

        if(dp[i][j]!=-1) return dp[i][j];

        return dp[i][j] = helper(obstacleGrid, m, n, i+1, j, dp) + helper(obstacleGrid, m, n, i, j+1,dp);
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();

        vector<vector<int>> dp(m, vector<int>(n,-1));
        return helper(obstacleGrid, m-1, n-1, 0, 0, dp);
    }
};

// Optimised solution


// FeedBack and more