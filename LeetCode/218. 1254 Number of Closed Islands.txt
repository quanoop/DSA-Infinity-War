// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    bool helper(vector<vector<int>> &grid, vector<vector<bool>> &visited, int i, int j, int m, int n){
        
        visited[i][j] = true;
        bool temp = true;
        if(i==0 || j==0 || i == m-1 || j == n-1) temp =  false;
        
        int dx[] = {0, 1 , 0, -1};
        int dy[] = {1, 0, -1, 0};

        for(int k = 0;k<4;k++){
            int ni = i + dx[k];
            int nj = j + dy[k];

            if(ni>=0 and nj>=0 and ni<m and nj < n and grid[ni][nj]==0 and !visited[ni][nj]){
                temp = helper(grid, visited, ni, nj, m, n) && temp;
            }
        }

        return temp;
    }
    int closedIsland(vector<vector<int>>& grid) {
        int ans = 0;
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                if(grid[i][j]==0 and !visited[i][j]){
                    bool isClosed = helper(grid, visited, i, j, m, n);
                    if(isClosed){
                        ans++;
                    }
                }
            }
        }

        return ans;
    }

};
// Optimised solution

// FeedBack and more

The && operator is tricky.