//Q: 


//Comments


//Initial Instinct




//Solution Code
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int helper(TreeNode* root){
        if(root==NULL) return 0;
        int left=helper(root->left);
        int right=helper(root->right);
        if(left == -1 || right == -1)
            return -1;
        if(abs(left-right)>1) return -1;
        return max(left, right) + 1;
}
    bool isBalanced(TreeNode* root) {
        int ans = helper(root);
        if(ans==-1) return false;
        else return true;
    }
};




//Optimised solution
We can also do this question by pair<bool, int> here bool will contain the result of balanced or not and the int will contain the height of the node. We can recursively do this for each node.



//FeedBack and more