// Q:

// Comments

// Initial Instinct

// Solution Code
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    static bool compare(pair<int, int> A, pair<int,int> B){
        if(A.first==B.first)
            return A.second <= B.second;
        return A.first < B.first;
    }
    void helper(TreeNode* root, int pos, int level, unordered_map<int, vector<pair<int, int>>> &map){
        if(root==NULL) return;
        map[pos].push_back(make_pair(level, root->val));
        helper(root->left, pos-1, level+ 1, map);
        helper(root->right, pos+1, level+1, map);
    }
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        unordered_map<int, vector<pair<int,int>>> map;
        helper(root, 0, 0, map);
        int i = 0;
        while(map.find(i)!=map.end()){
            i--;
        }
        i++;
        vector<vector<int>> ans;
        vector<int> temp;
        while(map.find(i)!=map.end()){
            sort(map[i].begin(), map[i].end(), compare);
            int s = map[i].size();
            for(int j=0;j<s;j++){
                temp.push_back(map[i][j].second);
            }
            ans.push_back(temp);
            temp.clear();
            i++;
        }
        return ans;
    }
};

// Optimised solution

// FeedBack and more