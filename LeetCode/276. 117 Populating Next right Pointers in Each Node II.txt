// Q:

// Comments

// Initial Instinct

// Solution Code
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        queue<Node*> q;
        q.push(root);
        q.push(NULL);

        vector<Node*> v;
        while(!q.empty()){
            Node* temp = q.front();
            q.pop();
            v.push_back(temp);
            if(temp != NULL){
                if(temp->left){
                q.push(temp->left);
                }
                if(temp->right){
                q.push(temp->right);
                }
    
            }
            if(!q.empty() and q.front()==NULL and temp!=NULL){
                q.push(NULL);
            }
        }
        q.push(NULL);
        int n = v.size();
        for(int i = 0 ;i<n-1;i++){
            if(v[i]!=NULL){
                v[i]->next = v[i+1];
            }
        }

        return root;
    }
};

// Optimised solution

// FeedBack and more