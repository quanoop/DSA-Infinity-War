//Q: 


//Comments


//Initial Instinct




//Solution Code
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> ans;
        int n = nums.size();
        deque<int> q(k);
        int i;
        for(i=0;i<k;i++){
            while(!q.empty() and nums[i]>nums[q.back()]){
                q.pop_back();
            }
            q.push_back(i);
        }
        
        for(;i<n;i++){
            ans.push_back(nums[q.front()]);
            
            while(!q.empty() and q.front() <= i-k){
                q.pop_front();
            }
            
            while(!q.empty() and nums[i]>=nums[q.back()]){
                q.pop_back();
            }
            q.push_back(i);
        }
        ans.push_back(nums[q.front()]);
        return ans;
    }
};




//Optimised solution



//FeedBack and more