// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    int helper(vector<vector<int>> &grid, vector<vector<int>>&dp, int i, int j, int m, int n){
        if(i==m and j==n) return dp[i][j] = grid[i][j];
        if(i==m) return dp[i][j] = helper(grid, dp, i, j+1, m, n) + grid[i][j];
        if(j==n) return dp[i][j] = helper(grid, dp, i+1, j, m, n) + grid[i][j];
        if(dp[i][j]!=-1) return dp[i][j];

        return dp[i][j] = min(helper(grid, dp, i+1, j, m, n)+ grid[i][j], helper(grid, dp, i, j+1, m, n)+ grid[i][j]);
        
    }
    int minPathSum(vector<vector<int>>& grid) {
        vector<vector<int>> dp(grid.size(), vector<int>(grid[0].size(), -1));
        return helper(grid, dp, 0, 0, grid.size()-1, grid[0].size()-1);
    }
};

// Optimised solution

int minPathSum(vector<vector<int>>& grid) {
    int m = grid.size();
    int n = grid[0].size();
    vector<vector<int>> dp(m,vector<int>(n,0));
    dp[0][0] = grid[0][0];
    for(int i=1;i<m;i++)
        dp[i][0] = dp[i-1][0] + grid[i][0];
    for(int j=1;j<n;j++)
        dp[0][j] = dp[0][j-1] + grid[0][j];
     for(int i=1;i<m;i++)
         for(int j=1;j<n;j++)
             dp[i][j] = min(dp[i-1][j],dp[i][j-1]) + grid[i][j];
        return dp[m-1][n-1];
    }


// FeedBack and more