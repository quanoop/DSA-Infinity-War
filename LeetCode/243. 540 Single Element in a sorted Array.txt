// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int s = 0;
        int e = nums.size()-1;
        int m;
        if(nums.size()==1) return nums[0];
        while(s<=e){
            m = (s+e)/2;
            if(m%2==0){
                if(m-1>=0){
                    if(nums[m]==nums[m-1]){
                        e = m-1;
                    } else {
                        s = m+1;
                    }
                } else{
                    if(nums[m]==nums[m+1]){
                        s = m+1;
                    } else {
                        return nums[m];
                    }

                }
            } else{
                if(nums[m]==nums[m-1]){
                    s = m+1;
                } else {
                    e = m-1;
                }
            }
            

        }
        if(m%2==1){
            return nums[m-1];
        }
        return nums[m];
    }
};

// Optimised solution
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int left = 0, right = nums.size() - 1;
        while(left < right){
            int mid = (left + right)/2;
            if((mid % 2 == 0 && nums[mid] == nums[mid + 1]) || (mid % 2 == 1 && nums[mid] == nums[mid - 1]))
                left = mid + 1;
            else
                right = mid;
        }
        
        return nums[left];
    }
};


// FeedBack and more