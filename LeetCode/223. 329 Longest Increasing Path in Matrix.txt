// Q:

// Comments

// Initial Instinct

// Solution Code

class Solution {
public:
    void dfs(vector<vector<int>>& matrix, vector<vector<int>>&dp, vector<vector<bool>> &visited, int i, int j, int m, int n){

        visited[i][j] = true;

        int cnt = 0;

        int dx[] = {1, -1, 0, 0};
        int dy[] = {0, 0, 1, -1};

        for(int k = 0;k<4;k++){
            int ni = i + dx[k];
            int nj = j + dy[k];

            if(ni>=0 and nj>=0 and ni<m and nj < n and matrix[ni][nj]>matrix[i][j]){
                if(visited[ni][nj]){
                    cnt = max(cnt, dp[ni][nj]+1);
                } else {
                    dfs(matrix, dp, visited, ni, nj, m, n);
                    cnt = max(cnt, 1 + dp[ni][nj]);
                }
            }
        }

        dp[i][j] = cnt;

    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();

        int ans = 0;

        vector<vector<bool>> visited(m, vector<bool>(n, false));
        vector<vector<int>> dp(m, vector<int>(n, 0));

        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                dfs(matrix, dp, visited, i, j, m, n);
                ans = max(ans, dp[i][j]);
            }
        }

        return ans+1;
    }
};

// Optimised solution

// FeedBack and more