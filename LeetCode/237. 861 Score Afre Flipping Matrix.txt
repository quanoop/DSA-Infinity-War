// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    int matrixScore(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
    
    for(int i = 0;i<m;i++){
        if(grid[i][0]==0){
            for(int j = 0;j<n;j++){
                if(grid[i][j]==0){
                    grid[i][j] = 1;
                }
                else {
                    grid[i][j] = 0;
                }
            }
        }
    }
    
    for(int i = 0;i<n;i++){
        int count0 = 0;
        for(int j = 0;j<m;j++){
            if(grid[j][i]==0){
                count0++;
            }
        }
        
        if(count0*2>m){
            for(int j = 0;j<m;j++){
            if(grid[j][i]==1){
               grid[j][i] = 0;
            }
            else {
                grid[j][i] = 1;
            }
        }
        }
    }

    // for(int i = 0;i<m;i++){
    //     for(int j = 0;j<n;j++){
    //         cout<<grid[i][j]<<" ";
    //     }
    //     cout<<endl;
    // }
    
    int ans = 0;
    for(int i = 0;i<m;i++){
        for(int j = 0;j<n;j++){
            if(grid[i][j]==1)
            ans+=pow(2, n-1-j);
        }
    }
    
    return ans;
    }
};

// Optimised solution
    int matrixScore(vector<vector<int>> A) {
        int M = A.size(), N = A[0].size(), res = (1 << (N - 1)) * M;
        for (int j = 1; j < N; j++) {
            int cur = 0;
            for (int i = 0; i < M; i++) cur += A[i][j] == A[i][0];
            res += max(cur, M - cur) * (1 << (N - j - 1));
        }
        return res;
    }

// FeedBack and more

This question can only be done using the bit manipulation using the shift operator to calculate the place value of a bit in the matrix. We are simply applying a greedy approach here.