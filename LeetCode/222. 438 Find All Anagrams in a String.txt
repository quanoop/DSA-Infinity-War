// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    bool isMatching(unordered_map<char,int> &a, unordered_map<char,int> &b){
        for(auto p : b){
            if(a[p.first]!=b[p.first]) return false;
        }
        return true;
    }
    vector<int> findAnagrams(string s, string p) {
        int m = s.length();
        int n = p.length();
        vector<int> ans;
        if(m < n) return ans;
        unordered_map<char, int> mapp;
        unordered_map<char, int> maps;

        for(char x : p){
            mapp[x]++;
        }



        for(int i = 0;i<n;i++){
            maps[s[i]]++;
        }

        if(isMatching(mapp, maps)) ans.push_back(0);

        for(int i = n;i<m;i++){
            maps[s[i-n]]--;
            maps[s[i]]++;
            
              if(isMatching(mapp, maps)) ans.push_back(i-n+1);
        }

        return ans;
    }
};

// Optimised solution

// FeedBack and more