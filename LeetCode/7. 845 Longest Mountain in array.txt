//Q: 
You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.


//Comments


//Initial Instinct




//Solution Code
class Solution {
public:
    int longestMountain(vector<int>& arr) {
        int ans=0;
        int n = arr.size();
        for(int i = 1;i<n-1;){
            if(arr[i]>arr[i-1] && arr[i]>arr[i+1]){
                int cnt = 1;
                //count backwards
                int j = i;
                while(j>=1&&arr[j]>arr[j-1]){
                    j--;
                    cnt++;
                }
                
                //count forward
                while(i<=n-2 and arr[i]>arr[i+1]){
                    i++;
                    cnt++;
                }
                
                ans = max(ans, cnt);
            }
            else{
                i++;
            }
            
        }
        return ans;
    }
};




//Optimised solution



//FeedBack and more