// Q:

// Comments

// Initial Instinct

// Solution Code
class Graph
{
    int V;
    list<int> *l;
public:
    Graph(int v)
    {
        V = v;
        l = new list<int>[V];
    }

    void addEdge(int i, int j)
    {
        l[i].push_back(j);
    }

     int minDice(int source, int dest)
    {
        vector<bool> visited(V, false);
        vector<int> dist(V, 0);
        vector<int> parent(V, -1);

        queue<int> q;

        q.push(source);

        parent[source] = source;
        dist[source] = 0;
        visited[source] = true;

        while (!q.empty())
        {
            int t = q.front();
            q.pop();

            for (auto nbr : l[t])
            {
                if (!visited[nbr])
                {
                    q.push(nbr);
                    parent[nbr] = t;
                    dist[nbr] = dist[t] + 1;
                    visited[nbr] = true;
                }
            }
        }
        return dist[dest];
    }
};
class Solution {
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        int n = board.size();
        int N = n*n;

        vector<int> b(N + 1, 0);
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                int p = (n-i-1)*n + j + 1;
                if(board[i][j]!=-1){
                    b[p] = board[i][j];
                }
            }
        }

        Graph g(N+1);

        for(int i = 1;i<N;i++){
            for(int j = 1;j<=6;j++){
                int u = i;
                int v = u + j;
                if(v<=N and b[v]!=0 and b[v]!=N){
                    v = b[v];
                }
                if(v<=N){
                    g.addEdge(u,v);
                }

            }
        }

        int ans = g.minDice(1, N);
        if(ans) return ans;

        return -1;
        
    }
};

// Optimised solution

// FeedBack and more