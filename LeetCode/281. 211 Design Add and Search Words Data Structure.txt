// Q:

// Comments

// Initial Instinct

// Solution Code
class Node {
    public:
    bool isTerminal;
    Node *child[26];
     Node (){
         isTerminal = false;
         for(int i = 0;i<26;i++){
             child[i] = NULL;
         }
     }

};
class Trie {
public:
    vector<char> v;
    Node* N;
    Trie() {

        N = new Node;
        
    }
    
    void insert(string word) {
        int n = word.length();
        Node* temp = N;
        for(int i = 0;i<n;i++){
            if(temp->child[word[i]-'a']==NULL){
                temp->child[word[i]-'a'] = new Node;
            }
            temp = temp->child[word[i]-'a'];   
        }
        temp->isTerminal = true;
    }
    
    bool search(string word, int i, Node* temp) {
        if(i==word.length()) return true and temp->isTerminal;
        bool ans = false;
        if(word[i]!='.'){
            if(temp->child[word[i]-'a']==NULL) return false;
            return search(word, i+1, temp->child[word[i]-'a']);
        } else {
            for(int j = 0;j<26;j++){
                if(temp->child[j]!=NULL){
                    ans = ans or search(word, i+1, temp->child[j]);
                }
            }

        }
       return ans;

        
    }
};
class WordDictionary {
public:
    Trie T;

    WordDictionary() {
    }
    
    void addWord(string word) {
        T.insert(word);
    }
    
    bool search(string word) {
        return T.search(word, 0, T.N);
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */

// Optimised solution

class WordDictionary {
    vector<WordDictionary*> children;
    bool isEndOfWord;
public:
    // Initialize your data structure here. 
    WordDictionary(): isEndOfWord(false){
        children = vector<WordDictionary*>(26, nullptr);
    }
    
    // Adds a word into the data structure. 
    void addWord(string word) {
        WordDictionary *curr = this;
        for(char c: word){
            if(curr->children[c - 'a'] == nullptr)
                curr->children[c - 'a'] = new WordDictionary();
            curr = curr->children[c - 'a'];
        }
        curr->isEndOfWord = true;
    }
    
    // Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. 
    bool search(string word) {
        WordDictionary *curr = this;
        for(int i = 0; i < word.length(); ++i){
            char c = word[i];
            if(c == '.'){
                for(auto ch: curr->children)
                    if(ch && ch->search(word.substr(i+1))) return true;
                return false;
            }
            if(curr->children[c - 'a'] == nullptr) return false;
            curr = curr->children[c - 'a'];
        }
        return curr && curr->isEndOfWord;
    }
};

// FeedBack and more