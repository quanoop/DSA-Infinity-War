//Q: 


//Comments


//Initial Instinct




//Solution Code
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, string &s) {
        if(root==NULL) return;
        s=s+to_string(root->val);
        if(root->left == NULL and root->right==NULL)
            return;
        if(root->left){
            s=s+'(';
            helper(root->left, s);
            s=s+')';
        } else {
            s=s+"()";
        }
        if(root->right){
            s=s+'(';
            helper(root->right, s);
            s=s+')';
        }
    }
   
    string tree2str(TreeNode* root) {
        string ans = "";
        helper(root, ans);
        return ans;
    }
};



//Optimised solution
public class Solution {
    public String tree2str(TreeNode t) {
        if(t==null)
            return "";
        if(t.left==null && t.right==null)
            return t.val+"";
        if(t.right==null)
            return t.val+"("+tree2str(t.left)+")";
        return t.val+"("+tree2str(t.left)+")("+tree2str(t.right)+")";   
    }
}




//FeedBack and more