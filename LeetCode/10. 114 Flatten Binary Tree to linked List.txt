//Q: 
Given the root of a binary tree, flatten the tree into a "linked list":

The "linked list" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.
The "linked list" should be in the same order as a pre-order traversal of the binary tree.


//Comments


//Initial Instinct




//Solution Code
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, vector<TreeNode*> &ans){
        if(root==NULL) return;
        
        ans.push_back(root);
        helper(root->left, ans);
        helper(root->right, ans);
    }
    void flatten(TreeNode* root) {
        vector<TreeNode*> ans;
        if(root){
            helper(root, ans);
            for(int i = 0 ; i<ans.size()-1;i++){
                ans[i]->right = ans[i+1];
                ans[i]->left = NULL;
            }
            root = ans[0];
        }
        
    }
};




//Optimised solution //this question cam also be done in Space complexity of O(1);

Using Intuition behind Morris Traversal.

Pre- req: Morris Traversal

class Solution {
public:
	void flatten(TreeNode* root) {
		TreeNode* cur = root;
		TreeNode* pre = NULL;
		while(cur){
			if(cur->left){
				pre = cur->left;
				while(pre->right)pre = pre->right;
				pre->right = cur->right;
				cur->right = cur->left;
				cur->left = NULL;
			}
			cur = cur->right;
		}
	}
};



//FeedBack and more
Learn about Morris traversal
And solve this question by that method again. Or dry run