// Q:

// Comments

// Initial Instinct

// Solution Code
//-----------------------Top Down approach

class Solution {
public:
    int helper(vector<int> &coins, int amount, vector<int> &dp){

        if(amount==0)return 0;
        
        if(dp[amount]!=-1) return dp[amount];


        int ans = INT_MAX;
        int c = coins.size();
        for(int i = 0;i<c;i++){
            if(coins[i]<=amount)
            ans = min(ans, helper(coins, amount-coins[i], dp));
        }
        if(ans!=INT_MAX) ans++;
        dp[amount] = ans;
        return ans;
    }
    int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount+1, -1);
        if(amount == 0) return 0;
        int ans = helper(coins,  amount, dp);
        if(ans!=INT_MAX) return ans;
        else return -1;
    }
};


//---------------------Bottom up approach


// Optimised solution

// FeedBack and more