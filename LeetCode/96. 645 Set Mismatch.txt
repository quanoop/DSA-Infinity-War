// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        vector<int> ans;
        int n = nums.size();
        unordered_map<int,int> map;
        for(int i = 0;i<n;i++){
            if(map.find(nums[i])==map.end()){
                map[nums[i]]=nums[i];
            } else {
                ans.push_back(nums[i]);
            }
        }
        for(int j = 1;j<=n;j++){
            if(map.find(j)==map.end()){
                ans.push_back(j);
            }
        }
        return ans;  
    }
};

// Optimised solution
public class Solution {
    public int[] findErrorNums(int[] nums) {
        Map < Integer, Integer > map = new HashMap();
        int dup = -1, missing = 1;
        for (int n: nums) {
            map.put(n, map.getOrDefault(n, 0) + 1);
        }
        for (int i = 1; i <= nums.length; i++) {
            if (map.containsKey(i)) {
                if (map.get(i) == 2)
                    dup = i;
            } else
                missing = i;
        }
        return new int[]{dup, missing};
    }
}

// FeedBack and more