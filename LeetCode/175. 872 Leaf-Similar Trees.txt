// Q:

// Comments

// Initial Instinct

// Solution Code
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, vector<int> &v){
        if(root==NULL) return ;
        if(root->left == NULL and root->right == NULL){
            v.push_back(root->val);
            return;
        }

        helper(root->left, v);
        helper(root->right, v);
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> v1;
        vector<int> v2;

        helper(root1, v1);
        helper(root2, v2);

        if(v1.size()!=v2.size()) return false;

        int n = v1.size();

        for(int i = 0;i<n;i++){
            if(v1[i]!=v2[i])
            return false;
        }

        return true;
    }
};

// Optimised solution

Instead of using two vectors we can use only one or we can also use another data structure like queues.

// FeedBack and more