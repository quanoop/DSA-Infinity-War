// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    int longestSquareStreak(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end(), greater<int>());
        unordered_map<int, int> map;
        for(int i =0;i<n;i++){
            map[nums[i]]++;
        }
        int ans = 1;
        for(int i = 0;i<n;i++){
            int c = 1;
            int x = nums[i];
        while(map[sqrt(x)]>0){
                int p = sqrt(x);
                if(p*p==x){
                    c++;
                } else break;
                map[nums[i]]--;
                x = p;   
                    
                }
            ans = max(ans, c);
        }
        if(ans==1){
            return -1;
        }
        return ans;
    }
};

// Optimised solution

// FeedBack and more