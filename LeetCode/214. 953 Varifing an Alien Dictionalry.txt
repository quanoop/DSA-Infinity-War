// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    bool inOrder(string a, string b, unordered_map<char, int>& map){
        int m = a.length();
        int n = b.length();

        int s = min(m, n);

        for(int i = 0;i<s;i++){
            if(map[a[i]]<map[b[i]]) return true;
            if(map[a[i]]>map[b[i]]) return false;
        }

        if(m>n) return false;

        return true;
    }
    bool isAlienSorted(vector<string>& words, string order) {
        unordered_map<char,int> map;
        int n = order.length();
        for(int i = 0;i<n;i++){
            map[order[i]] = i;
        }

        n = words.size();
        
        for(int i = 1;i<n;i++){
            if(!inOrder(words[i-1], words[i], map)) return false;
        }

        return true;
    }
};

// Optimised solution

// FeedBack and more