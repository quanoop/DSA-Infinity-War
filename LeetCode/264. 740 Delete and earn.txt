// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    int helper(vector<pair<int,int>> &v, int i, vector<int>&dp){
        if(i<0) return 0;

        if(dp[i]!=-1) return dp[i];
        int ans = 0;
        if(i-1>=0 and v[i].first-1==v[i-1].first){
            ans+=max(v[i].first*v[i].second + helper(v,i-2,dp), helper(v,i-1,dp));
        } else {
            ans+=max(v[i].first*v[i].second + helper(v, i-1, dp), helper(v, i-1, dp));
        }

        return dp[i] = ans;

    }
    int deleteAndEarn(vector<int>& nums) {
        int n = nums.size();
        unordered_map<int, int> map;
        for(int i = 0;i<n;i++){
            map[nums[i]]++;
        }
        vector<pair<int,int>> v;
        for(pair<int, int> p : map){
            v.push_back(p);
        }
        sort(v.begin(), v.end());

        int m = v.size();
        
        vector<int> dp(m, -1);


        return helper(v, m-1, dp);
        
    }
};

// Optimised solution

// FeedBack and more