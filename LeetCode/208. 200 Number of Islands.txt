// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    void helper(vector<vector<char>> & grid, int i, int j, int m, int n){
        grid[i][j] = '0';
        int dx[] = {0, 0 ,1 ,-1};
        int dy[] = {1, -1, 0, 0};

        for(int k = 0;k<4;k++){
            int ni = i + dx[k];
            int nj = j + dy[k];

            if(ni>=0 and nj >= 0 and ni<m and nj < n and grid[ni][nj]=='1'){
                helper(grid, ni, nj, m, n);
            }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int ans = 0;
        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                if(grid[i][j]=='1'){
                    ans++;
                    helper(grid, i, j, m, n);
                }
            }
        }
        return ans;
    }
};

// Optimised solution

// FeedBack and more