// Q:

// Comments

// Initial Instinct
Think of it as a advanced problem of longest common subsequence


// Solution Code

class Solution {
public:
    int longestPalindromeSubseq(string s) {
        string s1, s2;
        s1 = s2 = s;
        reverse(s2.begin(), s2.end());
        int m=s.size(), n=s.size();
        int dp[m+1][n+1];
        for(int i=0;i<=m;i++){
            for(int j=0; j<=n;j++){
                if(i==0||j==0)
                    dp[i][j]=0;
               else if(s1[i-1]==s2[j-1])
                    dp[i][j]= 1+ dp[i-1][j-1];
                else{
                    dp[i][j]= max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        
       
        return dp[m][n];
       
    }
};

// Optimised solution
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n));
        for (int i = n - 1; i >= 0; --i) {
            dp[i][i] = 1;
            for (int j = i+1; j < n; ++j) {
                if (s[i] == s[j]) {
                    dp[i][j] = dp[i+1][j-1] + 2;
                } else {
                    dp[i][j] = max(dp[i+1][j], dp[i][j-1]);
                }
            }
        }
        return dp[0][n-1];
       
    }
};

// FeedBack and more