//Q: 
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.




//Comments
This is a good example of application of binary search.


//Initial Instinct




//Solution Code
class Solution {
public:
    int getfirst(vector<int>& nums, int target){
        int s=0;
        int first = -1;
        int e = nums.size()-1;
        while(s<=e){
            int m = (s-e)/2 + e;
            if(nums[m]==target){
                first = m;
                e = m - 1;
            }
            else if(nums[m]>target){
                e = m-1;
            }
            else {
                s = m+1;
            }
        }
        return first;
    }
    int getlast(vector<int>& nums, int target){
        int s=0;
        int last = -1;
        int e = nums.size()-1;
        while(s<=e){
            int m = (s-e)/2 + e;
            if(nums[m]==target){
                last = m;
                s = m + 1;
            }
            else if(nums[m]>target){
                e = m-1;
            }
            else {
                s = m+1;
            }
        }
        return last;
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
       vector<int> ans;
        ans.push_back(getfirst(nums, target));
        ans.push_back(getlast(nums, target));
        
        return ans;
        
    }
};




//Optimised solution
We can put both first and last finding function in a single function by applying some condition like isfindfirst to set the value of s or e just after finding a match.


//FeedBack and more