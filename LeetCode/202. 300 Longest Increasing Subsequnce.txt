// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution { // 256 ms, faster than 42.84%
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n, 1);
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < i; ++j)
                if (nums[i] > nums[j] && dp[i] < dp[j] + 1)
                    dp[i] = dp[j] + 1;
        return *max_element(dp.begin(), dp.end());   // Trick to be noted;
    }
};

// Optimised solution
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n, 0);
        dp[0] = 1;
        for(int i = 1;i<n;i++){
            int ans=1;
            for(int j = 0;j<i;j++){
                if(nums[j]<nums[i])
                ans = max(dp[j] + 1, ans);
            }
            dp[i] = ans;
        }

     int ans = INT_MIN;
     for(int i = 0;i<n;i++){
         ans = max(ans, dp[i]);
     }
     return ans;
    }
};

// FeedBack and more