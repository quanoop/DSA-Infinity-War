// Q:

// Comments

// Initial Instinct

// Solution Code
class Solution {
public:
    pair<int,bool> helper(vector<vector<int>>& grid, int i, int j, int m, int n, vector<vector<bool>> &visited){
        pair<int, bool> temp;
        visited[i][j] = true;
        temp.first = 1;
        temp.second = true;

        if(i==0 || j==0 || i == m-1 || j == n-1) temp.second =  false;
        
        int dx[] = {0, 1 , 0, -1};
        int dy[] = {1, 0, -1, 0};

        for(int k = 0;k<4;k++){
            int ni = i + dx[k];
            int nj = j + dy[k];

            if(ni>=0 and nj>=0 and ni<m and nj < n and grid[ni][nj]==1 and !visited[ni][nj]){
                pair<int, bool> c = helper(grid, ni, nj, m, n, visited);
                temp.first+=c.first;
                temp.second = c.second && temp.second;
            }
        }

        return temp;

    }
    int numEnclaves(vector<vector<int>>& grid) {
        vector<vector<bool>> visited(grid.size(), vector<bool>(grid[0].size(), false));
        int ans = 0;
        int m = grid.size();
        int n = grid[0].size();

        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                if(!visited[i][j] and grid[i][j]==1){
                    pair<int, bool> p = helper(grid, i, j, m, n, visited);
                    if(p.second){
                        ans+=p.first;
                    }
                }
            }
        }
        return ans;
    }
};

// Optimised solution

We can think of another approach in which we don't have to use the pairs.

int dfs(int i,int j,vector<vector<int>> &A){
        if( i<0 || j<0 || i>=A.size() || j>=A[0].size() || A[i][j]==0)
            return 0;
        
        A[i][j] = 0;
        
        return 1+dfs(i-1,j,A)+dfs(i+1,j,A)+dfs(i,j-1,A)+dfs(i,j+1,A);
    }
    
    int numEnclaves(vector<vector<int>>& A) {
        int all_one=0;
        for(int i=0;i<A.size();i++){
            for(int j=0;j<A[0].size();j++)
                    all_one+=A[i][j];
        }
        int close_one = 0;
        for(int i=0;i<A.size();i++){
            for(int j=0;j<A[0].size();j++){
                if((i==0 || j==0 || i==A.size()-1 || j==A[0].size()-1) && A[i][j]==1)
                    close_one+= dfs(i,j,A);
            }
        }
        return all_one - close_one;
    }

// FeedBack and more