// Q:

// Comments

// Initial Instinct

// Solution Code
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void printatK(TreeNode* root, int k, vector<int> &ans){
        if(root==NULL) return;
        if(k==0){
            ans.push_back(root->val);
            return;
        } 
        
        printatK(root->left,k-1,ans);
        printatK(root->right,k-1,ans);
    }
    int helper(TreeNode* root, TreeNode* target, int k, vector<int> &ans){
        if(root==NULL) return -1;
        
        if(root==target){
            printatK(root, k, ans);
            return 0;
        }
        
    int left = helper(root->left, target, k, ans);
        if(left!=-1){
            if(left+1==k){
                ans.push_back(root->val);
            } else {
                printatK(root->right, k - 2 - left, ans);
            }
            return 1+left;
        }
        
    int right = helper(root->right, target, k, ans);
        if(right!=-1){
            if(right+1==k){
                ans.push_back(root->val);
            } else {
                printatK(root->left, k - 2 - right, ans);
            }
            return 1+right;
        }
        
        return -1;
    
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<int> ans;
        int temp = helper(root, target, k, ans);
        
        return ans;
        
    }
};

// Optimised solution

Look at the detailed code by Prateek Bhaiya in level up DSA course in binary tree section.
Also look at the solution of leetcode solution section. There two different approaches from this are given.

// FeedBack and more