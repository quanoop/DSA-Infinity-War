// Q:

// Comments

// Initial Instinct

// Solution Code
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL) return NULL;
        int cnt=1;
        ListNode* pre = NULL;
        ListNode* current = head;
        ListNode* temp;
        ListNode* check=head;
        int n = k;
        while(n and check){
            check=check->next;
            n--;
        }
        if(n){
            return head;
        }
        while(current and cnt<=k){
            temp = current->next;
            current->next=pre;
            pre = current;
            current = temp;
            cnt++;
            
        }
        if(temp){
            head->next = reverseKGroup(temp,k);
        }
        
        return pre;
        
    }
};

// Optimised solution

// FeedBack and more