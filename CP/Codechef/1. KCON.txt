//Q: 


//Comments


//Initial Instinct




//Solution Code

#include <iostream>
using namespace std;

typedef long long ll;

ll kaden(int arr[], int n){
    ll currentMax = 0;
    ll bestMax = -2147483647;
    for(int i = 0;i<n;i++){
	            currentMax+=arr[i];
	            if(bestMax<currentMax)
	            bestMax = currentMax;
	            if(currentMax<0)
	            currentMax =0;
	        }
	return bestMax;
}

ll maxSubarraySum(int arr[], int n, int k){
    ll kadenes_sum = kaden(arr, n);
    if(k==1){
        return kadenes_sum;
    }
    ll current_PS = 0;
    ll current_SS = 0;
    ll maxPS = -2147483647;
    ll maxSS = -2147483647;
    
    for(int i=0;i<n;i++){
        current_PS+=arr[i];
        maxPS = max(maxPS, current_PS);
    }
    
    ll totalSum = current_PS;
    
    for(int i=n-1;i>=0;i--){
        current_SS+=arr[i];
        maxSS = max(current_SS, maxSS);
    }
    ll ans;
    if(totalSum< 0){
        ans = max(maxSS + maxPS, kadenes_sum);
    } else {
        ans = max(maxSS + maxPS + (totalSum*(k-2)), kadenes_sum);
    }
    
    return ans;
    
}

int main() {
	// your code goes here
	int t;
	cin>>t;
	while(t--){
	    int N,K;
	    cin>>N>>K;
	    int arr[N];
	    for(int i=0;i<N;i++){
	        cin>>arr[i];
	    }
	    ll ans = maxSubarraySum(arr, N, K);
	   cout<<ans<<endl;
	}
	return 0;
}





//Optimised solution



//FeedBack and more